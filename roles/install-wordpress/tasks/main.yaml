- name: Ensure directory for Wordpress files is created
  ansible.builtin.file:
    path: "{{ wordpress_path }}"
    state: directory
    mode: "g+s"
    owner: "{{ username }}"
    group: "{{ execution_group }}"

- block:
  - name: Check if Wordpress is already downloaded
    ansible.builtin.stat:
      path: "{{ wordpress_path }}/wp-login.php"
    register: wp_files

  - name: Download Wordpress files
    ansible.builtin.shell: /usr/local/bin/wp core download
    args:
      chdir: "{{ wordpress_path }}"
    when: not wp_files.stat.exists

  - name: Check if Wordpress is already configured
    ansible.builtin.stat:
      path: "{{ wordpress_path }}/wp-config.php"
    register: wp_config

  - name: Configure Wordpress
    ansible.builtin.shell: |
      /usr/local/bin/wp config create \
        --dbname={{ mysql_databases.0.name | ansible.builtin.quote }} \
        --dbuser={{ mysql_users.0.name | ansible.builtin.quote }} \
        --dbpass={{ mysql_users.0.password | ansible.builtin.quote }}
    args:
      chdir: "{{ wordpress_path }}"
    when: not wp_config.stat.exists

  - name: Check if Wordpress is already installed
    ansible.builtin.shell: /usr/local/bin/wp core is-installed 2>/dev/null
    args:
      chdir: "{{ wordpress_path }}"
    ignore_errors: true
    register: wp_installation

  - name: Install Wordpress
    ansible.builtin.shell: |
      /usr/local/bin/wp core install \
        --url={{ domain.url | ansible.builtin.quote }} \
        --title={{ domain.wp.title | ansible.builtin.quote }} \
        --admin_user={{ domain.wp.admin_user | ansible.builtin.quote }} \
        --admin_password={{ domain.wp.admin_password | ansible.builtin.quote }} \
        --admin_email={{ domain.wp.admin_email | ansible.builtin.quote }}
    args:
      chdir: "{{ wordpress_path }}"
    when: wp_installation.rc != 0

  become: true
  become_user: "{{ username }}"
